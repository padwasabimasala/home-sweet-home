#The most commonly used git commands are:
#   add        Add file contents to the index
#   bisect     Find by binary search the change that introduced a bug
#   branch     List, create, or delete branches
#   checkout   Checkout a branch or paths to the working tree
#   clone      Clone a repository into a new directory
#   commit     Record changes to the repository
#   diff       Show changes between commits, commit and working tree, etc
#   fetch      Download objects and refs from another repository
#   grep       Print lines matching a pattern
#   init       Create an empty git repository or reinitialize an existing one
#   log        Show commit logs
#   merge      Join two or more development histories together
#   mv         Move or rename a file, a directory, or a symlink
#   pull       Fetch from and merge with another repository or a local branch
#   push       Update remote refs along with associated objects
#   rebase     Forward-port local commits to the updated upstream head
#   reset      Reset current HEAD to the specified state
#   rm         Remove files from the working tree and from the index
#   show       Show various types of objects
#   status     Show the working tree status
#   tag        Create, list, delete or verify a tag object signed with GPG

[user]
	name = Matthew Thorley
	email = padwasabimasala@gmail
[alias]
  # Edit this file quickly
  rcedit = "! /usr/bin/env vim ~/.gitconfig"

  # Clean up in a hurry without reservation
  bomb = "!git reset --hard && git clean -df"

  # Standard abbreviations
  a = add
  b = branch
  c = checkout
  cm = commit
  d = diff --color
  l = "!git log --abbrev-commit --date=short --pretty=format:'-SEP-%h-SEP-%cd-SEP-%s-SEP-%an-SEP-%d' | awk -F '-SEP-' '{ printf \"%s\\033[31m%s\\033[0m \\033[32m%s\\033[0m   %-70s \\033[30;1m%s\\033[0m\\033[33m%s\\n\", $1, $2, $3, substr($4,0,70), $5, $6 }'|less -R"
  p = pull
  r = revert
  s = status
  x = rebase

  # Branches
  bd = branch -D
  branch-delete = branch -D
  branch-delete-merged = "!git branch --merged |grep -v '*' |xargs -n 1 git branch -d" # http://stackoverflow.com/questions/6127328/how-can-i-delete-all-git-branches-which-are-already-merged
  branch-delete-all = "!git branch |grep -v '*' |xargs -n 1 git branch -D"
  branch-show-recent = "!for k in `git branch|perl -pe s/^..//`;do echo `git show --pretty=format:'%Cgreen%ci %Cblue%cr%Creset' $k|head -n 1`\t$k;done|sort -r" # http://www.commandlinefu.com/commands/view/2345/show-git-branches-by-date-useful-for-showing-active-branches

  # Committing
  cam = commit -am
  commit-into-last = "!git reset --soft HEAD^ && git commit -am "
  undo-last-commit  = reset --soft HEAD^
  merge-last-two-commits = "!msg=$(git log -n1 --pretty=oneline --abbrev-commit |cut -d' ' -f2) && git reset --soft HEAD~2 && git commit -am \"$msg\""

  # Diffing
  diff-cached = diff --color --cached
  dc = diff --color --cached
  diff-last = diff --color HEAD~1
  dl = diff --color HEAD~1
  recent-changes = "!git diff --color $(git rev-list -n1 --before=\"1 day ago\" master)" # http://stackoverflow.com/questions/1161609/in-git-how-can-i-get-the-diff-between-all-the-commits-that-occured-between-two

  # Ignore and Unignore
  ignore = update-index --assume-unchanged
  unignore = update-index --no-assume-unchanged

  # Log styles
  log-long = "!git log --abbrev-commit --date=short --pretty=format:'-SEP-%h-SEP-%cd-SEP-%s-SEP-%an-SEP-%d' | awk -F '-SEP-' '{ printf \"%s\\033[31m%s\\033[0m \\033[32m%s\\033[0m   %-250s \\033[30;1m%s\\033[0m\\033[33m%s\\n\", $1, $2, $3, $4, $5, $6 }'|less -R"
  log-stat = log --color --stat
  log-tree = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

  # Rebasing
  xh2 = rebase -i HEAD~2
  xh3 = rebase -i HEAD~3
  xh4 = rebase -i HEAD~4
  xh5 = rebase -i HEAD~5

  # Etc
  remotes = remote -v
  rh = reset --hard
  unadd = reset HEAD
  untracked = "ls-files --other --exclude-standard"
[core]
	editor = /usr/bin/vim
[push]
	default = tracking
[github]
	user = padwasabimasala
