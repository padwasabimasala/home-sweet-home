#The most commonly used git commands are:
#   add        Add file contents to the index
#   bisect     Find by binary search the change that introduced a bug
#   branch     List, create, or delete branches
#   checkout   Checkout a branch or paths to the working tree
#   clone      Clone a repository into a new directory
#   commit     Record changes to the repository
#   diff       Show changes between commits, commit and working tree, etc
#   fetch      Download objects and refs from another repository
#   grep       Print lines matching a pattern
#   init       Create an empty git repository or reinitialize an existing one
#   log        Show commit logs
#   merge      Join two or more development histories together
#   mv         Move or rename a file, a directory, or a symlink
#   pull       Fetch from and merge with another repository or a local branch
#   push       Update remote refs along with associated objects
#   rebase     Forward-port local commits to the updated upstream head
#   reset      Reset current HEAD to the specified state
#   rm         Remove files from the working tree and from the index
#   show       Show various types of objects
#   status     Show the working tree status
#   tag        Create, list, delete or verify a tag object signed with GPG

[user]
	name = Matthew Thorley
	email = padwasabimasala@gmail
[alias]
  a = add
  b = branch
  bomb = "!git reset --hard && git clean -df"
  c = checkout
  cam = commit -am
  cm = commit
  d = diff --color
  dc = diff --color --cached
  # http://stackoverflow.com/questions/6127328/how-can-i-delete-all-git-branches-which-are-already-merged
  # FIXME
  # delete-merged = "!git branch --merged | grep -v '\*' | xargs -n 1 git branch -d"
  l =  log --abbrev-commit --date=short --pretty=format:'%h  %cd  "%s" -- %an'
  lg = "!git log --abbrev-commit --date=short --pretty=format:'-SEP-%h-SEP-%cd-SEP-%s-SEP-%an-SEP-%d' | awk -F '-SEP-' '{ printf \"%s\\033[31m%s\\033[0m \\033[32m%s\\033[0m   %-100s \\033[30;1m%s\\033[0m\\033[33m%s\\n\", $1, $2, $3, $4, $5, $6 }'|less -R"
  lga = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  untracked = "ls-files --other --exclude-standard"
  ignore = update-index --assume-unchanged
  p = pull
  r = revert
  rh = reset --hard
  # http://www.commandlinefu.com/commands/view/2345/show-git-branches-by-date-useful-for-showing-active-branches
  recent-branches = "!for k in `git branch|perl -pe s/^..//`;do echo `git show --pretty=format:'%Cgreen%ci %Cblue%cr%Creset' $k|head -n 1`\t$k;done|sort -r"
  # http://stackoverflow.com/questions/1161609/in-git-how-can-i-get-the-diff-between-all-the-commits-that-occured-between-two
  recent-changes = "!git diff --color $(git rev-list -n1 --before=\"1 day ago\" master)"
  s = status
  unadd = reset HEAD
  undo-last-commit  = reset --soft HEAD^
  unignore = update-index --no-assume-unchanged
[core]
	editor = /usr/bin/vim
[push]
	default = tracking
[github]
	user = padwasabimasala
